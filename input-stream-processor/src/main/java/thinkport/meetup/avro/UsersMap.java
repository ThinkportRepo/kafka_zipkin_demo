/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package thinkport.meetup.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UsersMap extends org.apache.avro.specific.SpecificRecordBase
		implements org.apache.avro.specific.SpecificRecord {

	private static final long serialVersionUID = 3915162215766556815L;

	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"UsersMap\",\"namespace\":\"thinkport.meetup.avro\",\"fields\":[{\"name\":\"registertime\",\"type\":{\"type\":\"long\",\"arg.properties\":{\"range\":{\"min\":1487715775521,\"max\":1519273364600}}}},{\"name\":\"userid\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"regex\":\"User_[1-9]{0,1}\"}}},{\"name\":\"regionid\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"regex\":\"Region_[1-9]?\"}}},{\"name\":\"gender\",\"type\":{\"type\":\"string\",\"arg.properties\":{\"options\":[\"MALE\",\"FEMALE\",\"OTHER\"]}}},{\"name\":\"interests\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"arg.properties\":{\"options\":[[\"Game\",\"News\"],[\"Game\",\"Sport\"],[\"News\",\"Movies\"],[\"News\",\"Travel\"]]}}},{\"name\":\"contactinfo\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"arg.properties\":{\"options\":[{\"phone\":\"6503349999\",\"city\":\"San Mateo\",\"state\":\"CA\",\"zipcode\":\"94403\"},{\"phone\":\"9492229999\",\"city\":\"Irvine\",\"state\":\"CA\",\"zipcode\":\"92617\"},{\"phone\":\"6503889999\",\"city\":\"Palo Alto\",\"state\":\"CA\",\"zipcode\":\"94301\"},{\"phone\":\"4083366881\",\"city\":\"San Jose\",\"state\":\"CA\",\"zipcode\":\"95112\"},{\"phone\":\"6502215368\",\"city\":\"San Carlos\",\"state\":\"CA\",\"zipcode\":\"94070\"}]}}}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public long registertime;

	@Deprecated
	public java.lang.CharSequence userid;

	@Deprecated
	public java.lang.CharSequence regionid;

	@Deprecated
	public java.lang.CharSequence gender;

	@Deprecated
	public java.util.List<java.lang.CharSequence> interests;

	@Deprecated
	public java.util.Map<java.lang.CharSequence, java.lang.CharSequence> contactinfo;

	/**
	 * Default constructor. Note that this does not initialize fields to their default
	 * values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public UsersMap() {
	}

	/**
	 * All-args constructor.
	 * @param registertime The new value for registertime
	 * @param userid The new value for userid
	 * @param regionid The new value for regionid
	 * @param gender The new value for gender
	 * @param interests The new value for interests
	 * @param contactinfo The new value for contactinfo
	 */
	public UsersMap(java.lang.Long registertime, java.lang.CharSequence userid,
			java.lang.CharSequence regionid, java.lang.CharSequence gender,
			java.util.List<java.lang.CharSequence> interests,
			java.util.Map<java.lang.CharSequence, java.lang.CharSequence> contactinfo) {
		this.registertime = registertime;
		this.userid = userid;
		this.regionid = regionid;
		this.gender = gender;
		this.interests = interests;
		this.contactinfo = contactinfo;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(int field$) {
		switch (field$) {
		case 0:
			return registertime;
		case 1:
			return userid;
		case 2:
			return regionid;
		case 3:
			return gender;
		case 4:
			return interests;
		case 5:
			return contactinfo;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$) {
		switch (field$) {
		case 0:
			registertime = (java.lang.Long) value$;
			break;
		case 1:
			userid = (java.lang.CharSequence) value$;
			break;
		case 2:
			regionid = (java.lang.CharSequence) value$;
			break;
		case 3:
			gender = (java.lang.CharSequence) value$;
			break;
		case 4:
			interests = (java.util.List<java.lang.CharSequence>) value$;
			break;
		case 5:
			contactinfo = (java.util.Map<java.lang.CharSequence, java.lang.CharSequence>) value$;
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'registertime' field.
	 * @return The value of the 'registertime' field.
	 */
	public java.lang.Long getRegistertime() {
		return registertime;
	}

	/**
	 * Sets the value of the 'registertime' field.
	 * @param value the value to set.
	 */
	public void setRegistertime(java.lang.Long value) {
		this.registertime = value;
	}

	/**
	 * Gets the value of the 'userid' field.
	 * @return The value of the 'userid' field.
	 */
	public java.lang.CharSequence getUserid() {
		return userid;
	}

	/**
	 * Sets the value of the 'userid' field.
	 * @param value the value to set.
	 */
	public void setUserid(java.lang.CharSequence value) {
		this.userid = value;
	}

	/**
	 * Gets the value of the 'regionid' field.
	 * @return The value of the 'regionid' field.
	 */
	public java.lang.CharSequence getRegionid() {
		return regionid;
	}

	/**
	 * Sets the value of the 'regionid' field.
	 * @param value the value to set.
	 */
	public void setRegionid(java.lang.CharSequence value) {
		this.regionid = value;
	}

	/**
	 * Gets the value of the 'gender' field.
	 * @return The value of the 'gender' field.
	 */
	public java.lang.CharSequence getGender() {
		return gender;
	}

	/**
	 * Sets the value of the 'gender' field.
	 * @param value the value to set.
	 */
	public void setGender(java.lang.CharSequence value) {
		this.gender = value;
	}

	/**
	 * Gets the value of the 'interests' field.
	 * @return The value of the 'interests' field.
	 */
	public java.util.List<java.lang.CharSequence> getInterests() {
		return interests;
	}

	/**
	 * Sets the value of the 'interests' field.
	 * @param value the value to set.
	 */
	public void setInterests(java.util.List<java.lang.CharSequence> value) {
		this.interests = value;
	}

	/**
	 * Gets the value of the 'contactinfo' field.
	 * @return The value of the 'contactinfo' field.
	 */
	public java.util.Map<java.lang.CharSequence, java.lang.CharSequence> getContactinfo() {
		return contactinfo;
	}

	/**
	 * Sets the value of the 'contactinfo' field.
	 * @param value the value to set.
	 */
	public void setContactinfo(
			java.util.Map<java.lang.CharSequence, java.lang.CharSequence> value) {
		this.contactinfo = value;
	}

	/**
	 * Creates a new UsersMap RecordBuilder.
	 * @return A new UsersMap RecordBuilder
	 */
	public static thinkport.meetup.avro.UsersMap.Builder newBuilder() {
		return new thinkport.meetup.avro.UsersMap.Builder();
	}

	/**
	 * Creates a new UsersMap RecordBuilder by copying an existing Builder.
	 * @param other The existing builder to copy.
	 * @return A new UsersMap RecordBuilder
	 */
	public static thinkport.meetup.avro.UsersMap.Builder newBuilder(
			thinkport.meetup.avro.UsersMap.Builder other) {
		return new thinkport.meetup.avro.UsersMap.Builder(other);
	}

	/**
	 * Creates a new UsersMap RecordBuilder by copying an existing UsersMap instance.
	 * @param other The existing instance to copy.
	 * @return A new UsersMap RecordBuilder
	 */
	public static thinkport.meetup.avro.UsersMap.Builder newBuilder(
			thinkport.meetup.avro.UsersMap other) {
		return new thinkport.meetup.avro.UsersMap.Builder(other);
	}

	/**
	 * RecordBuilder for UsersMap instances.
	 */
	public static class Builder
			extends org.apache.avro.specific.SpecificRecordBuilderBase<UsersMap>
			implements org.apache.avro.data.RecordBuilder<UsersMap> {

		private long registertime;

		private java.lang.CharSequence userid;

		private java.lang.CharSequence regionid;

		private java.lang.CharSequence gender;

		private java.util.List<java.lang.CharSequence> interests;

		private java.util.Map<java.lang.CharSequence, java.lang.CharSequence> contactinfo;

		/** Creates a new Builder */
		private Builder() {
			super(SCHEMA$);
		}

		/**
		 * Creates a Builder by copying an existing Builder.
		 * @param other The existing Builder to copy.
		 */
		private Builder(thinkport.meetup.avro.UsersMap.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.registertime)) {
				this.registertime = data().deepCopy(fields()[0].schema(),
						other.registertime);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.userid)) {
				this.userid = data().deepCopy(fields()[1].schema(), other.userid);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.regionid)) {
				this.regionid = data().deepCopy(fields()[2].schema(), other.regionid);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(fields()[3], other.gender)) {
				this.gender = data().deepCopy(fields()[3].schema(), other.gender);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(fields()[4], other.interests)) {
				this.interests = data().deepCopy(fields()[4].schema(), other.interests);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(fields()[5], other.contactinfo)) {
				this.contactinfo = data().deepCopy(fields()[5].schema(),
						other.contactinfo);
				fieldSetFlags()[5] = true;
			}
		}

		/**
		 * Creates a Builder by copying an existing UsersMap instance
		 * @param other The existing instance to copy.
		 */
		private Builder(thinkport.meetup.avro.UsersMap other) {
			super(SCHEMA$);
			if (isValidValue(fields()[0], other.registertime)) {
				this.registertime = data().deepCopy(fields()[0].schema(),
						other.registertime);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.userid)) {
				this.userid = data().deepCopy(fields()[1].schema(), other.userid);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.regionid)) {
				this.regionid = data().deepCopy(fields()[2].schema(), other.regionid);
				fieldSetFlags()[2] = true;
			}
			if (isValidValue(fields()[3], other.gender)) {
				this.gender = data().deepCopy(fields()[3].schema(), other.gender);
				fieldSetFlags()[3] = true;
			}
			if (isValidValue(fields()[4], other.interests)) {
				this.interests = data().deepCopy(fields()[4].schema(), other.interests);
				fieldSetFlags()[4] = true;
			}
			if (isValidValue(fields()[5], other.contactinfo)) {
				this.contactinfo = data().deepCopy(fields()[5].schema(),
						other.contactinfo);
				fieldSetFlags()[5] = true;
			}
		}

		/**
		 * Gets the value of the 'registertime' field.
		 * @return The value.
		 */
		public java.lang.Long getRegistertime() {
			return registertime;
		}

		/**
		 * Sets the value of the 'registertime' field.
		 * @param value The value of 'registertime'.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder setRegistertime(long value) {
			validate(fields()[0], value);
			this.registertime = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/**
		 * Checks whether the 'registertime' field has been set.
		 * @return True if the 'registertime' field has been set, false otherwise.
		 */
		public boolean hasRegistertime() {
			return fieldSetFlags()[0];
		}

		/**
		 * Clears the value of the 'registertime' field.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder clearRegistertime() {
			fieldSetFlags()[0] = false;
			return this;
		}

		/**
		 * Gets the value of the 'userid' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getUserid() {
			return userid;
		}

		/**
		 * Sets the value of the 'userid' field.
		 * @param value The value of 'userid'.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder setUserid(
				java.lang.CharSequence value) {
			validate(fields()[1], value);
			this.userid = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/**
		 * Checks whether the 'userid' field has been set.
		 * @return True if the 'userid' field has been set, false otherwise.
		 */
		public boolean hasUserid() {
			return fieldSetFlags()[1];
		}

		/**
		 * Clears the value of the 'userid' field.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder clearUserid() {
			userid = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/**
		 * Gets the value of the 'regionid' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getRegionid() {
			return regionid;
		}

		/**
		 * Sets the value of the 'regionid' field.
		 * @param value The value of 'regionid'.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder setRegionid(
				java.lang.CharSequence value) {
			validate(fields()[2], value);
			this.regionid = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/**
		 * Checks whether the 'regionid' field has been set.
		 * @return True if the 'regionid' field has been set, false otherwise.
		 */
		public boolean hasRegionid() {
			return fieldSetFlags()[2];
		}

		/**
		 * Clears the value of the 'regionid' field.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder clearRegionid() {
			regionid = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		/**
		 * Gets the value of the 'gender' field.
		 * @return The value.
		 */
		public java.lang.CharSequence getGender() {
			return gender;
		}

		/**
		 * Sets the value of the 'gender' field.
		 * @param value The value of 'gender'.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder setGender(
				java.lang.CharSequence value) {
			validate(fields()[3], value);
			this.gender = value;
			fieldSetFlags()[3] = true;
			return this;
		}

		/**
		 * Checks whether the 'gender' field has been set.
		 * @return True if the 'gender' field has been set, false otherwise.
		 */
		public boolean hasGender() {
			return fieldSetFlags()[3];
		}

		/**
		 * Clears the value of the 'gender' field.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder clearGender() {
			gender = null;
			fieldSetFlags()[3] = false;
			return this;
		}

		/**
		 * Gets the value of the 'interests' field.
		 * @return The value.
		 */
		public java.util.List<java.lang.CharSequence> getInterests() {
			return interests;
		}

		/**
		 * Sets the value of the 'interests' field.
		 * @param value The value of 'interests'.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder setInterests(
				java.util.List<java.lang.CharSequence> value) {
			validate(fields()[4], value);
			this.interests = value;
			fieldSetFlags()[4] = true;
			return this;
		}

		/**
		 * Checks whether the 'interests' field has been set.
		 * @return True if the 'interests' field has been set, false otherwise.
		 */
		public boolean hasInterests() {
			return fieldSetFlags()[4];
		}

		/**
		 * Clears the value of the 'interests' field.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder clearInterests() {
			interests = null;
			fieldSetFlags()[4] = false;
			return this;
		}

		/**
		 * Gets the value of the 'contactinfo' field.
		 * @return The value.
		 */
		public java.util.Map<java.lang.CharSequence, java.lang.CharSequence> getContactinfo() {
			return contactinfo;
		}

		/**
		 * Sets the value of the 'contactinfo' field.
		 * @param value The value of 'contactinfo'.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder setContactinfo(
				java.util.Map<java.lang.CharSequence, java.lang.CharSequence> value) {
			validate(fields()[5], value);
			this.contactinfo = value;
			fieldSetFlags()[5] = true;
			return this;
		}

		/**
		 * Checks whether the 'contactinfo' field has been set.
		 * @return True if the 'contactinfo' field has been set, false otherwise.
		 */
		public boolean hasContactinfo() {
			return fieldSetFlags()[5];
		}

		/**
		 * Clears the value of the 'contactinfo' field.
		 * @return This builder.
		 */
		public thinkport.meetup.avro.UsersMap.Builder clearContactinfo() {
			contactinfo = null;
			fieldSetFlags()[5] = false;
			return this;
		}

		@Override
		public UsersMap build() {
			try {
				UsersMap record = new UsersMap();
				record.registertime = fieldSetFlags()[0] ? this.registertime
						: (java.lang.Long) defaultValue(fields()[0]);
				record.userid = fieldSetFlags()[1] ? this.userid
						: (java.lang.CharSequence) defaultValue(fields()[1]);
				record.regionid = fieldSetFlags()[2] ? this.regionid
						: (java.lang.CharSequence) defaultValue(fields()[2]);
				record.gender = fieldSetFlags()[3] ? this.gender
						: (java.lang.CharSequence) defaultValue(fields()[3]);
				record.interests = fieldSetFlags()[4] ? this.interests
						: (java.util.List<java.lang.CharSequence>) defaultValue(
								fields()[4]);
				record.contactinfo = fieldSetFlags()[5] ? this.contactinfo
						: (java.util.Map<java.lang.CharSequence, java.lang.CharSequence>) defaultValue(
								fields()[5]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}

	}

	private static final org.apache.avro.io.DatumWriter WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(
			SCHEMA$);

	@Override
	public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
		WRITER$.write(this, SpecificData.getEncoder(out));
	}

	private static final org.apache.avro.io.DatumReader READER$ = new org.apache.avro.specific.SpecificDatumReader(
			SCHEMA$);

	@Override
	public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
		READER$.read(this, SpecificData.getDecoder(in));
	}

}
